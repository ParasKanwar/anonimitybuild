{"version":3,"sources":["components/Home/MyProblems/MyProblems.jsx","components/Home/MyProblems/problemList/ReanderProblems.jsx","components/Home/PostProblem/PostProblem.jsx","../node_modules/lodash/isEqual.js","components/Home/MyProblems/forComp/forComp.jsx","components/Home/MyProblems/forTablet/forTab.jsx","components/Home/MyProblems/forMob/forMob.jsx"],"names":["connect","props","Responsive","onlyComputer","deviceType","onlyTablet","onlyMobile","state","profilePhoto","userReducer","username","id","problems","length","isLoading","status","title","map","problem","UpVotedByMe","UpVoted_By","find","user","DownVotedByMe","DownVoted_By","key","_id","anonymous","Anonymous","isHome","UserId","Author","socket","header","image","Media","imageUrl","description","Description","createdAt","UpVotes","DownVotes","hasDeleteButton","history","token","localStorage","getItem","PostProblem","useState","setLoading","setStatus","setDescription","isUploaded","setUploaded","problemImageUrl","setUrl","isAnonymous","setAnonymous","open","message","autoHideDuration","onClose","dimmer","Header","src","require","size","circular","style","marginTop","fontWeight","fontSize","fontFamily","UserName","label","select","variant","color","SelectProps","backgroundColor","fullWidth","value","onChange","a","b","name","Content","loading","height","borderRadius","e","target","placeholder","hasUpload","method","accept","headers","Authorization","contentType","action","url","info","file","response","error","onRemove","console","log","Headers","append","request","Request","fetch","then","res","catch","disabled","textTransform","marginRight","Actions","marginBottom","onClick","postMyPost","window","location","reload","err","baseIsEqual","module","exports","other","theme","createMuiTheme","palette","primary","main","orange","secondary","blue","centered","display","justifyContent","sortByOptions","text","isFetching","setFetching","isError","setError","MyProblems","setProblems","isFetched","setFetched","offset","totalProblems","setCount","page","setPage","start","sortBy","setSortBy","postsProblem","setPost","fetchNewProblems","getMyPosts","json","count","setTimeout","container","item","xs","offsetTop","zIndex","options","width","event","scrollTo","parseInt","position","left","bottom"],"mappings":"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","file":"static/js/17.cd24ea3d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Responsive } from \"semantic-ui-react\";\r\nimport ForComp from \"./forComp/forComp\";\r\nimport ForTab from \"./forTablet/forTab\";\r\nimport { connect } from \"react-redux\";\r\nimport ForMob from \"./forMob/forMob\";\r\n\r\nconst MyProblems = (props) => {\r\n  return (\r\n    <div>\r\n      <Responsive {...Responsive.onlyComputer}>\r\n        <ForComp deviceType=\"comp\" {...props}></ForComp>\r\n      </Responsive>\r\n      <Responsive {...Responsive.onlyTablet}>\r\n        <ForTab deviceType=\"tab\" {...props}></ForTab>\r\n      </Responsive>\r\n      <Responsive {...Responsive.onlyMobile}>\r\n        <ForMob deviceType=\"mob\" {...props}></ForMob>\r\n      </Responsive>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect()(MyProblems);\r\n","import React from \"react\";\r\nimport Problem from \"./Problem\";\r\nimport { Result } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst RenderProblems = (props) => {\r\n  return (\r\n    <div>\r\n      {props.problems.length !== 0 && !props.isLoading ? (\r\n        props.problems.map((problem) => {\r\n          const UpVotedByMe = problem.UpVoted_By.find((user) => {\r\n            return user.user === props.id;\r\n          });\r\n          const DownVotedByMe = problem.DownVoted_By.find((user) => {\r\n            return user.user === props.id;\r\n          });\r\n\r\n          return (\r\n            <Problem\r\n              key={problem._id}\r\n              anonymous={problem.Anonymous}\r\n              isHome={true}\r\n              UserId={problem.Author}\r\n              UpVotedByMe={!!UpVotedByMe}\r\n              deviceType={props.deviceType}\r\n              DownVotedByMe={!!DownVotedByMe}\r\n              socket={props.socket}\r\n              id={problem._id}\r\n              profilePhoto={props.profilePhoto}\r\n              username={props.username}\r\n              header={\"College Problems\"}\r\n              image={!problem.Media ? \"\" : problem.Media.imageUrl}\r\n              description={problem.Description}\r\n              createdAt={problem.createdAt}\r\n              UpVotes={problem.UpVotes}\r\n              DownVotes={problem.DownVotes}\r\n              hasDeleteButton={true}\r\n              history={props.history}\r\n            ></Problem>\r\n          );\r\n        })\r\n      ) : !props.isLoading ? (\r\n        <Result\r\n          status=\"success\"\r\n          title=\"Hurray !! No Problems that I Am Facing\"\r\n        ></Result>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profilePhoto: state.userReducer.profilePhoto,\r\n    username: state.userReducer.username,\r\n    id: state.userReducer.id,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(RenderProblems);\r\n","import React, { useState } from \"react\";\r\nimport { TextField, MenuItem, Button, Snackbar } from \"@material-ui/core\";\r\nimport {\r\n  Modal,\r\n  Form,\r\n  TextArea,\r\n  Button as Button1,\r\n  Image,\r\n  Divider,\r\n} from \"semantic-ui-react\";\r\nimport { PhotoCamera, Public, SecurityTwoTone } from \"@material-ui/icons\";\r\nimport { postMyPost, postPhoto } from \"../../../ApiRequests/request\";\r\nimport { Upload, message } from \"antd\";\r\nimport url from \"../../../strings/url\";\r\nconst token = localStorage.getItem(\"AnonymityToken#123\");\r\nconst PostProblem = (props) => {\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [status, setStatus] = useState(\"unknown\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [isUploaded, setUploaded] = useState(false);\r\n  const [problemImageUrl, setUrl] = useState(null);\r\n  const [isAnonymous, setAnonymous] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      {status === \"error\" ? (\r\n        <Snackbar\r\n          open={status !== \"unknown\"}\r\n          message=\"Error Posting\"\r\n          autoHideDuration={3000}\r\n          onClose={() => setStatus(\"unknown\")}\r\n        ></Snackbar>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {status === \"success\" ? (\r\n        <Snackbar\r\n          open={status !== \"unknown\"}\r\n          message=\"SuccessFul\"\r\n          autoHideDuration={3000}\r\n          onClose={() => setStatus(\"unknown\")}\r\n        ></Snackbar>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Modal dimmer=\"inverted\" open={props.open} onClose={props.onClose}>\r\n        <Modal.Header>\r\n          <Image\r\n            src={\r\n              props.profilePhoto || require(\"../../../images/complainify.png\")\r\n            }\r\n            size=\"mini\"\r\n            circular\r\n          ></Image>\r\n          <div\r\n            style={{\r\n              marginTop: 10,\r\n              fontWeight: \"500\",\r\n              fontSize: 14,\r\n              fontFamily: \"poppins\",\r\n            }}\r\n          >\r\n            <b>{props.UserName + \" \" || \"Unknown\" + \" \"}</b>\r\n            Have a Problem <Divider></Divider>\r\n            <div>\r\n              <TextField\r\n                label=\"Problem Should Be Listed as\"\r\n                select\r\n                variant=\"filled\"\r\n                color=\"secondary\"\r\n                SelectProps={{\r\n                  style: { backgroundColor: \"rgba(0,0,0,0.01)\" },\r\n                }}\r\n                fullWidth\r\n                value={isAnonymous}\r\n                onChange={(a, b) => {\r\n                  setAnonymous(b.props.value);\r\n                }}\r\n                name=\"course\"\r\n              >\r\n                <MenuItem key=\"Public\" value={false}>\r\n                  Public\r\n                </MenuItem>\r\n                <MenuItem key=\"Anonymous\" value={true}>\r\n                  Anonymous\r\n                </MenuItem>\r\n              </TextField>\r\n            </div>\r\n          </div>\r\n        </Modal.Header>\r\n        <Modal.Content>\r\n          <Form loading={isLoading}>\r\n            <TextArea\r\n              style={{ height: 100, fontSize: 15, borderRadius: \"0px\" }}\r\n              value={description}\r\n              onChange={(e) => {\r\n                setDescription(e.target.value);\r\n              }}\r\n              placeholder=\"Describe Your Problem\"\r\n            ></TextArea>\r\n          </Form>\r\n        </Modal.Content>\r\n        {props.hasUpload ? (\r\n          <Modal.Content>\r\n            <Upload\r\n              method=\"PUT\"\r\n              accept=\"image/*\"\r\n              headers={{\r\n                Authorization: localStorage.getItem(\"AnonymityToken#123\"),\r\n                contentType: \"application/json\",\r\n              }}\r\n              name=\"image\"\r\n              action={`${url}/user/post/photo`}\r\n              onChange={(info) => {\r\n                if (info.file.status === \"done\") {\r\n                  setUploaded(true);\r\n                  setLoading(false);\r\n                  setUrl(info.file.response);\r\n                } else if (info.file.status === \"removed\") {\r\n                  setLoading(false);\r\n                  setUploaded(false);\r\n                } else if (info.file.status === \"uploading\") {\r\n                  setLoading(true);\r\n                } else if (info.file.error) {\r\n                  setLoading(false);\r\n                }\r\n              }}\r\n              onRemove={() => {\r\n                console.log(\"on Remove called\");\r\n                const headers = new Headers();\r\n                headers.append(\"Authorization\", token);\r\n                headers.append(\"content-type\", \"application/json\");\r\n                const request = new Request(\r\n                  `${url}/post/photo/${problemImageUrl.key}`,\r\n                  { method: \"DELETE\", headers }\r\n                );\r\n                fetch(request)\r\n                  .then((res) => {\r\n                    console.log(res.status);\r\n                  })\r\n                  .catch((e) => {\r\n                    console.log(e);\r\n                  });\r\n                setUrl(null);\r\n              }}\r\n              disabled={isUploaded}\r\n            >\r\n              <Button\r\n                style={{\r\n                  fontFamily: \"poppins\",\r\n                  fontWeight: \"bold\",\r\n                  textTransform: \"none\",\r\n                }}\r\n                disabled={isUploaded}\r\n              >\r\n                <div style={{ marginRight: 10 }}>Upload Photo</div>\r\n                <PhotoCamera\r\n                  style={{ color: \"rgba(44,130,201,1)\" }}\r\n                ></PhotoCamera>\r\n              </Button>\r\n            </Upload>\r\n          </Modal.Content>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n\r\n        <Modal.Actions>\r\n          <Button1\r\n            color=\"blue\"\r\n            // inverted\r\n            size=\"medium\"\r\n            style={{\r\n              marginBottom: 10,\r\n              // color: \"white\",\r\n              marginRight: 10,\r\n              textTransform: \"none\",\r\n              fontFamily: \"poppins\",\r\n            }}\r\n            disabled={description.length < 1 || isLoading}\r\n            onClick={() => {\r\n              setLoading(true);\r\n              const token = localStorage.getItem(\"AnonymityToken#123\");\r\n              postMyPost(\r\n                token,\r\n                description,\r\n                \"problem\",\r\n                problemImageUrl,\r\n                isAnonymous\r\n              )\r\n                .then((res) => {\r\n                  if (res.status === 200) {\r\n                    window.location.reload(false);\r\n                    setStatus(\"success\");\r\n                    props.onClose();\r\n                    return;\r\n                  }\r\n                  setLoading(false);\r\n                  setStatus(\"error\");\r\n                  props.onClose();\r\n                })\r\n                .catch((err) => {\r\n                  setLoading(false);\r\n                  setStatus(\"error\");\r\n                });\r\n\r\n              setUrl(null);\r\n            }}\r\n            variant=\"outlined\"\r\n          >\r\n            Post Problem\r\n          </Button1>\r\n          <Button1\r\n            size=\"medium\"\r\n            style={{\r\n              marginBottom: 10,\r\n              textTransform: \"none\",\r\n              fontFamily: \"poppins\",\r\n            }}\r\n            onClick={() => {\r\n              setLoading(false);\r\n              props.onClose();\r\n              if (problemImageUrl) {\r\n                const headers = new Headers();\r\n                headers.append(\"Authorization\", token);\r\n                headers.append(\"content-type\", \"application/json\");\r\n                const request = new Request(\r\n                  `${url}/post/photo/${problemImageUrl.key}`,\r\n                  { method: \"DELETE\", headers }\r\n                );\r\n                fetch(request)\r\n                  .then((res) => {\r\n                    console.log(res.status);\r\n                    setUrl(null);\r\n                  })\r\n                  .catch((e) => {\r\n                    setUrl(null);\r\n                    console.log(e);\r\n                  });\r\n              }\r\n              setUploaded(false);\r\n            }}\r\n            // color=\"red\"\r\n            // inverted\r\n          >\r\n            Close\r\n          </Button1>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostProblem;\r\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n","import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Fab,\r\n  createMuiTheme,\r\n  ThemeProvider,\r\n  CircularProgress,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport { Edit } from \"@material-ui/icons\";\r\nimport { Affix } from \"antd\";\r\nimport { blue, orange } from \"@material-ui/core/colors\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport { getMyProblems as getMyPosts } from \"../../../../ApiRequests/request\";\r\nimport RenderProblems from \"../problemList/ReanderProblems\";\r\nimport { Select } from \"semantic-ui-react\";\r\nimport PostProblems from \"../../PostProblem/PostProblem\";\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: orange[500],\r\n    },\r\n    secondary: {\r\n      main: blue[500],\r\n    },\r\n  },\r\n});\r\nconst centered = { display: \"flex\", justifyContent: \"center\" };\r\nconst sortByOptions = [\r\n  { key: \"Latest\", value: \"Latest\", text: \"Latest\" },\r\n  // { key: \"UpVote\", value: \"UpVote\", text: \"Up Votes\" },\r\n  // { key: \"DownVote\", value: \"DownVote\", text: \"Down Votes\" },\r\n  { key: \"oldest\", value: \"oldest\", text: \"Oldest\" },\r\n];\r\nconst MyProblems = (props) => {\r\n  const [isFetching, setFetching] = useState(true);\r\n  const [isError, setError] = useState(false);\r\n  const [MyProblems, setProblems] = useState([]);\r\n  const token = localStorage.getItem(\"AnonymityToken#123\");\r\n  const [isFetched, setFetched] = useState(false);\r\n  const [offset, setOffset] = useState(10);\r\n  const [totalProblems, setCount] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [start, setStart] = useState(0);\r\n  const [sortBy, setSortBy] = useState(\"Latest\");\r\n  const [postsProblem, setPost] = useState(false);\r\n\r\n  const fetchNewProblems = (token, start, offset, sortBy) => {\r\n    setProblems([]);\r\n    getMyPosts(token, start, offset, sortBy)\r\n      .then(async (res) => {\r\n        if (res.status === 200) {\r\n          const { problems, count } = await res.json();\r\n\r\n          setProblems([...problems]);\r\n          setCount(count);\r\n          setTimeout(() => setFetching(false), 0);\r\n          return;\r\n        }\r\n        setError(true);\r\n        setTimeout(() => setFetching(false), 0);\r\n      })\r\n      .catch((e) => {\r\n        setError(true);\r\n        setTimeout(() => setFetching(false), 0);\r\n      });\r\n    setFetched(true);\r\n  };\r\n  if (!isFetched) {\r\n    fetchNewProblems(token, start, offset);\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <PostProblems\r\n        open={postsProblem}\r\n        UserName={props.username}\r\n        profilePhoto={props.profilePhoto}\r\n        onClose={() => {\r\n          setPost(false);\r\n        }}\r\n        hasUpload={true}\r\n      ></PostProblems>\r\n      <Snackbar\r\n        open={isError}\r\n        onClose={() => {\r\n          setError(false);\r\n        }}\r\n        autoHideDuration={6000}\r\n        message=\"Error Loading New Problems\"\r\n      ></Snackbar>\r\n      <Grid container style={{ marginTop: 10 }}>\r\n        <Grid item xs={3}>\r\n          <Affix offsetTop={100}>\r\n            <div style={centered}>\r\n              <Fab\r\n                color=\"secondary\"\r\n                style={{\r\n                  textTransform: \"none\",\r\n                  fontFamily: \"poppins\",\r\n                  color: \"white\",\r\n                  zIndex: 100,\r\n                  fontWeight: \"bold\",\r\n                }}\r\n                onClick={() => {\r\n                  setPost(true);\r\n                }}\r\n              >\r\n                <Edit></Edit>\r\n              </Fab>\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: 20,\r\n                fontWeight: \"bold\",\r\n                fontSize: 15,\r\n                fontFamily: \"poppins\",\r\n              }}\r\n            >\r\n              SortBy\r\n            </div>\r\n            <div style={{ ...centered, marginTop: 5 }}>\r\n              <Select\r\n                placeholder=\"Sort Problem By ?\"\r\n                options={sortByOptions}\r\n                value={sortBy}\r\n                onChange={(e, { value }) => {\r\n                  setSortBy(value);\r\n\r\n                  setFetching(true);\r\n                  setPage(1);\r\n                  fetchNewProblems(token, 0, offset, value);\r\n                }}\r\n              ></Select>\r\n            </div>\r\n          </Affix>\r\n        </Grid>\r\n\r\n        <Grid item xs={6} style={centered}>\r\n          <div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <RenderProblems\r\n                isLoading={isFetching}\r\n                problems={MyProblems}\r\n                {...props}\r\n              ></RenderProblems>\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: 100,\r\n                marginBottom: 100,\r\n              }}\r\n            >\r\n              {isFetching ? (\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    marginTop: 100,\r\n                    marginBottom: 100,\r\n                  }}\r\n                >\r\n                  <CircularProgress\r\n                    style={{ width: 50, height: 50, color: \"black\" }}\r\n                  ></CircularProgress>\r\n                </div>\r\n              ) : (\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    marginTop: 50,\r\n                    marginBottom: 50,\r\n                  }}\r\n                >\r\n                  {totalProblems > 10 ? (\r\n                    <Pagination\r\n                      color=\"secondary\"\r\n                      page={page}\r\n                      onChange={(event, page) => {\r\n                        setFetching(true);\r\n                        fetchNewProblems(\r\n                          token,\r\n                          (page - 1) * offset,\r\n                          offset,\r\n                          sortBy\r\n                        );\r\n                        window.scrollTo(0, 0);\r\n                        setPage(page);\r\n                      }}\r\n                      count={parseInt(totalProblems / offset) + 1}\r\n                    ></Pagination>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </ThemeProvider>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    username: state.userReducer.username,\r\n    profilePhoto: state.userReducer.profilePhoto,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(MyProblems);\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Fab,\r\n  createMuiTheme,\r\n  ThemeProvider,\r\n  CircularProgress,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport { Edit } from \"@material-ui/icons\";\r\nimport { Affix } from \"antd\";\r\nimport { blue, orange } from \"@material-ui/core/colors\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport { getMyProblems as getMyPosts } from \"../../../../ApiRequests/request\";\r\nimport RenderProblems from \"../problemList/ReanderProblems\";\r\nimport { Select } from \"semantic-ui-react\";\r\nimport PostProblems from \"../../PostProblem/PostProblem\";\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: orange[500],\r\n    },\r\n    secondary: {\r\n      main: blue[500],\r\n    },\r\n  },\r\n});\r\nconst centered = { display: \"flex\", justifyContent: \"center\" };\r\nconst sortByOptions = [\r\n  { key: \"Latest\", value: \"Latest\", text: \"Latest\" },\r\n  // { key: \"UpVote\", value: \"UpVote\", text: \"Up Votes\" },\r\n  // { key: \"DownVote\", value: \"DownVote\", text: \"Down Votes\" },\r\n  { key: \"oldest\", value: \"oldest\", text: \"Oldest\" },\r\n];\r\nconst MyProblems = (props) => {\r\n  const [isFetching, setFetching] = useState(true);\r\n  const [isError, setError] = useState(false);\r\n  const [MyProblems, setProblems] = useState([]);\r\n  const token = localStorage.getItem(\"AnonymityToken#123\");\r\n  const [isFetched, setFetched] = useState(false);\r\n  const [offset, setOffset] = useState(10);\r\n  const [totalProblems, setCount] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [start, setStart] = useState(0);\r\n  const [sortBy, setSortBy] = useState(\"Latest\");\r\n  const [postsProblem, setPost] = useState(false);\r\n  const fetchNewProblems = (token, start, offset, sortBy) => {\r\n    setProblems([]);\r\n    getMyPosts(token, start, offset, sortBy)\r\n      .then(async (res) => {\r\n        if (res.status === 200) {\r\n          const { problems, count } = await res.json();\r\n\r\n          setProblems([...problems]);\r\n          setCount(count);\r\n          setTimeout(() => setFetching(false), 0);\r\n          return;\r\n        }\r\n        setError(true);\r\n        setTimeout(() => setFetching(false), 0);\r\n      })\r\n      .catch((e) => {\r\n        setError(true);\r\n        setTimeout(() => setFetching(false), 0);\r\n      });\r\n    setFetched(true);\r\n  };\r\n  if (!isFetched) {\r\n    fetchNewProblems(token, start, offset);\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <PostProblems\r\n        open={postsProblem}\r\n        UserName={props.username || \"Hello\"}\r\n        profilePhoto={props.profilePhoto}\r\n        onClose={() => {\r\n          setPost(false);\r\n        }}\r\n        hasUpload={true}\r\n      ></PostProblems>\r\n      <Snackbar\r\n        open={isError}\r\n        onClose={() => {\r\n          setError(false);\r\n        }}\r\n        autoHideDuration={6000}\r\n        message=\"Error Loading New Problems\"\r\n      ></Snackbar>\r\n      <Grid container style={{ marginTop: 10 }}>\r\n        <Grid item xs={4}>\r\n          <Affix offsetTop={10}>\r\n            <div style={centered}>\r\n              <Fab\r\n                color=\"primary\"\r\n                style={{\r\n                  textTransform: \"none\",\r\n                  fontFamily: \"poppins\",\r\n                  color: \"white\",\r\n                  zIndex: 100,\r\n                }}\r\n                onClick={() => {\r\n                  setPost(true);\r\n                }}\r\n              >\r\n                <Edit></Edit>\r\n              </Fab>\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: 20,\r\n                fontWeight: \"bold\",\r\n                fontSize: 15,\r\n                fontFamily: \"poppins\",\r\n              }}\r\n            >\r\n              SortBy\r\n            </div>\r\n            <div style={{ ...centered, marginTop: 5 }}>\r\n              <Select\r\n                placeholder=\"Sort Problem By ?\"\r\n                options={sortByOptions}\r\n                value={sortBy}\r\n                onChange={(e, { value }) => {\r\n                  setSortBy(value);\r\n                  setFetching(true);\r\n                  setPage(1);\r\n                  fetchNewProblems(token, 0, offset, value);\r\n                }}\r\n              ></Select>\r\n            </div>\r\n          </Affix>\r\n        </Grid>\r\n\r\n        <Grid item xs={7} style={centered}>\r\n          <div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <RenderProblems\r\n                isLoading={isFetching}\r\n                problems={MyProblems}\r\n                {...props}\r\n              ></RenderProblems>\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: 100,\r\n                marginBottom: 100,\r\n              }}\r\n            >\r\n              {isFetching ? (\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    marginTop: 100,\r\n                    marginBottom: 100,\r\n                  }}\r\n                >\r\n                  <CircularProgress\r\n                    style={{ width: 50, height: 50, color: \"black\" }}\r\n                  ></CircularProgress>\r\n                </div>\r\n              ) : (\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    marginTop: 50,\r\n                    marginBottom: 50,\r\n                  }}\r\n                >\r\n                  {totalProblems > 10 ? (\r\n                    <Pagination\r\n                      color=\"secondary\"\r\n                      page={page}\r\n                      onChange={(event, page) => {\r\n                        setFetching(true);\r\n                        fetchNewProblems(\r\n                          token,\r\n                          (page - 1) * offset,\r\n                          offset,\r\n                          sortBy\r\n                        );\r\n                        window.scrollTo(0, 0);\r\n                        setPage(page);\r\n                      }}\r\n                      count={parseInt(totalProblems / offset) + 1}\r\n                    ></Pagination>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </ThemeProvider>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    username: state.userReducer.username,\r\n    profilePhoto: state.userReducer.profilePhoto,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MyProblems);\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Paper,\r\n  Grid,\r\n  Fab,\r\n  createMuiTheme,\r\n  ThemeProvider,\r\n  CircularProgress,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport { Edit } from \"@material-ui/icons\";\r\nimport { Affix } from \"antd\";\r\nimport { blue, orange } from \"@material-ui/core/colors\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport { getMyProblems as getMyPosts } from \"../../../../ApiRequests/request\";\r\nimport RenderProblems from \"../problemList/ReanderProblems\";\r\nimport { Select } from \"semantic-ui-react\";\r\nimport PostProblems from \"../../PostProblem/PostProblem\";\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: orange[500],\r\n    },\r\n    secondary: {\r\n      main: blue[500],\r\n    },\r\n  },\r\n});\r\nconst centered = { display: \"flex\", justifyContent: \"center\" };\r\nconst sortByOptions = [\r\n  { key: \"Latest\", value: \"Latest\", text: \"Latest\" },\r\n  // { key: \"UpVote\", value: \"UpVote\", text: \"Up Votes\" },\r\n  // { key: \"DownVote\", value: \"DownVote\", text: \"Down Votes\" },\r\n  { key: \"oldest\", value: \"oldest\", text: \"Oldest\" },\r\n];\r\nconst MyProblems = (props) => {\r\n  const [isFetching, setFetching] = useState(true);\r\n  const [isError, setError] = useState(false);\r\n  const [MyProblems, setProblems] = useState([]);\r\n  const token = localStorage.getItem(\"AnonymityToken#123\");\r\n  const [isFetched, setFetched] = useState(false);\r\n  const [offset, setOffset] = useState(10);\r\n  const [totalProblems, setCount] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [start, setStart] = useState(0);\r\n  const [sortBy, setSortBy] = useState(\"Latest\");\r\n  const [postsProblem, setPost] = useState(false);\r\n  const fetchNewProblems = (token, start, offset, sortBy) => {\r\n    setProblems([]);\r\n    getMyPosts(token, start, offset, sortBy)\r\n      .then(async (res) => {\r\n        if (res.status === 200) {\r\n          const { problems, count } = await res.json();\r\n\r\n          setProblems([...problems]);\r\n          setCount(count);\r\n          setTimeout(() => setFetching(false), 0);\r\n          return;\r\n        }\r\n        setError(true);\r\n        setTimeout(() => setFetching(false), 0);\r\n      })\r\n      .catch((e) => {\r\n        setError(true);\r\n        setTimeout(() => setFetching(false), 0);\r\n      });\r\n    setFetched(true);\r\n  };\r\n  if (!isFetched) {\r\n    fetchNewProblems(token, start, offset);\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <PostProblems\r\n        open={postsProblem}\r\n        onClose={() => {\r\n          setPost(false);\r\n        }}\r\n        hasUpload={true}\r\n        UserName={props.username}\r\n        profilePhoto={props.profilePhoto}\r\n      ></PostProblems>\r\n      <Snackbar\r\n        open={isError}\r\n        onClose={() => {\r\n          setError(false);\r\n        }}\r\n        autoHideDuration={6000}\r\n        message=\"Error Loading New Problems\"\r\n      ></Snackbar>\r\n      <Grid container style={{ marginTop: 10 }}>\r\n        <Grid item xs={12}>\r\n          <div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                fontSize: 15,\r\n                fontWeight: \"bold\",\r\n                fontFamily: \"poppins\",\r\n                marginRight: 10,\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              Sort By\r\n            </div>\r\n            <div style={centered}>\r\n              <Select\r\n                placeholder=\"Sort Problem By ?\"\r\n                options={sortByOptions}\r\n                value={sortBy}\r\n                style={{ marginBottom: 10 }}\r\n                onChange={(e, { value }) => {\r\n                  setSortBy(value);\r\n                  setFetching(true);\r\n                  setPage(1);\r\n                  fetchNewProblems(token, 0, offset, value);\r\n                }}\r\n              ></Select>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <RenderProblems\r\n                isLoading={isFetching}\r\n                problems={MyProblems}\r\n                {...props}\r\n              ></RenderProblems>\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: 100,\r\n                marginBottom: 100,\r\n              }}\r\n            >\r\n              {isFetching ? (\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    marginTop: 100,\r\n                    marginBottom: 100,\r\n                  }}\r\n                >\r\n                  <CircularProgress\r\n                    style={{ width: 50, height: 50, color: \"black\" }}\r\n                  ></CircularProgress>\r\n                </div>\r\n              ) : (\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    marginTop: 50,\r\n                    marginBottom: 50,\r\n                  }}\r\n                >\r\n                  {totalProblems > 10 ? (\r\n                    <Pagination\r\n                      color=\"secondary\"\r\n                      page={page}\r\n                      onChange={(event, page) => {\r\n                        setFetching(true);\r\n                        fetchNewProblems(\r\n                          token,\r\n                          (page - 1) * offset,\r\n                          offset,\r\n                          sortBy\r\n                        );\r\n                        window.scrollTo(0, 0);\r\n                        setPage(page);\r\n                      }}\r\n                      count={parseInt(totalProblems / offset) + 1}\r\n                    ></Pagination>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n      <Fab\r\n        color=\"secondary\"\r\n        style={{\r\n          textTransform: \"none\",\r\n          fontFamily: \"poppins\",\r\n          color: \"white\",\r\n          position: \"fixed\",\r\n          left: \"2%\",\r\n          bottom: \"10%\",\r\n          zIndex: 100,\r\n        }}\r\n        onClick={() => {\r\n          setPost(true);\r\n        }}\r\n      >\r\n        <Edit></Edit>\r\n      </Fab>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    username: state.userReducer.username,\r\n    profilePhoto: state.userReducer.profilePhoto,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MyProblems);\r\n"],"sourceRoot":""}